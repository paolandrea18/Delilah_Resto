openapi: 3.0.1

info:
  title: Delilah Restó API
  description: Delilah Resto is an online ordering system for a restaurant. Anyone can consult the list of products. as a user you can create a profile, access and modify your personal information, order delicious food through the app and delete your profile is you wish.  The administrator user has all the permissions to modify users’ information by Id, get the information of all users and delete a user; also, can create, update and delete products of the menu and modify the status of the orders and access to all orders in the system.
  contact:
    name: Paola Andrea Cadena Joya
    url: www.linkedin.com/in/paola-andrea-cadena-joya-62995920b
    email: pcadenajoya@hotmail.com
   
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0

externalDocs:
  description: Github Repository
  url: https://github.com/paolandrea18/Delilah_Resto
  
servers:
  # Added by API Auto Mocking Plugin
  - description: Delilah Resto API Server
    url: http://localhost:4000/api
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/delilah-resto42/DelilahResto/1.0.0
  
tags:
  - name: users
    description: User's own operations in the application, such as creating a user, logging in, updating information, ordering products and deleting their own information. And operations restricted to admin profile.
  - name: products
    description: Access to Deliah Resto products info, some operations restricted to the administrator profile like create, update and delete products.
  - name: orders
    description: Operations about orders, create order, update order status (onlye for admin role) and more.

#USERS PATHS
paths:
  /users:
    post:
      tags:
      - users
      summary: Create User
      description: Only an unregistered user can perform this action to create a new user.
      operationId: createUser
      requestBody:
        description: New object (user) to be added to database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "El usuario ha sido creado con éxito."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                type: string
                example: { "error": "Error en la creación de usuario."}
  
  /users/login:
    post:
      tags:
      - users
      summary: Login for registered users
      description: Login for registered users to place orders and modify their personal information.
      operationId: login
      requestBody:
        description: Login with username and password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  required:
                  - message
                  - data
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Usuario logeado con éxito."
                    data:
                      type: string
                      example: {"accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImphbmVkb2UiLCJwYXNzd29yZCI6ImFiYzQ1NiIsImlhdCI6MTYzNzE2MDYxMn0.FqwMm6X5I1Z2fV4Kl9OJG6VTa8KoGzerRAu4cwOWOlE"}
          400:
            description: Bad Request.
            content: 
              application/json:
                schema:
                  type: string
                  example: { "message": "Usuario o contraseña inválidos."}     
          404:
            description: Not Found.
            content: 
              application/json:
                schema:
                  type: string
                  example: { "message": "Usuario o contraseña no encontrados."} 
          501:
            description: Error.
            content: 
              application/json:
                schema:
                  type: string
                  example: { "error": "Error en login de usuario."}               
  
  /users/getAllUsers/{roleId}:
    get:
      tags:
      - users
      security:
      - bearerAuth: []
      summary: Get All Users
      description: Only an administrator user can access to all users information 
      operationId: getAllUsers
      parameters:
      - name: roleId
        in: path
        description: Specifies the role of the user to be able to perform the action and access the information as an administrator.
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: OK - data.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/allUsers'
              example:
                - userId: 1 
                  username: "pancajo"
                  roleId: 1
                  password: "$2b$10$swbn9VczVKJevuCS39CELOvgpyKgMk1ufcuvuKTzJePYo1qw3GQVi"
                  firstName: "Paola Andrea"
                  lastName: "Cadena Joya"
                  email: "pancajo@gmail.com"
                  address: "Carrera 1 # 2 - 3"
                  phone: "3124567890"
                  enable:
                    "type": "Buffer"
                    "data": [1] 
                - userId: 2
                  username: "janedoe"
                  roleId: 2
                  password: "$2b$10$V6W4gnUq.vxKJCoVuqTpfOreExsrOOHGbMhsqKL7I3NMTBu0N7aXm"
                  firstName: "Jane"
                  lastName: "Doe"
                  email: "janedoe@email.com"
                  address: "Calle 2 # 3 -45"
                  phone: "3101234567"
                  enable:
                    "type": "Buffer"
                    "data": [1] 
                - userId: 3
                  username: "laracroft"
                  roleId: 2
                  password: "$2b$10$s5ZbHRggj/XYHiGpGzdtEOdhRsMrzSqOKQWkzMPtyTjk.0nD2glSq"
                  firstName: "Lara"
                  lastName: "Croft"
                  email: "laracroft@gmail.com"
                  address: "Circunvalar 7 # 8 - 90"
                  phone: "3159876543"
                  enable:
                    "type": "Buffer"
                    "data": [1] 
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "No se pudo obtener la información."}
              - {"error": "Error en validación"}    
  
  /users/update:
    put:
      tags:
      - users
      security:
      - bearerAuth: []
      summary: Update user information
      description: Update the information user, only the administrator can perform this action and update any user from the database, if the user has a client role he/she can only update his/her own information; system verifies if the update user is the same user in session (userLoggeId) and allows the action otherwise it will deny the request to the user. 
      operationId: update
      requestBody:
        description: New user
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/updateUser'
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "Usuario actualizado con éxito."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "El usuario no pudo ser actualizado."}
              - {"error": "Error en validación"}    
  
  /users/{userLoggedId}/{userId}:  
    get:
      tags:
      - users
      security:
      - bearerAuth: []
      summary: Get User by Id
      description: Get all information user by Id, only the administrator can perform this action and get the information of any user from the database by id, if the user has a client role he/she can only get his/her own information, in this case the system verifies if the query user is the same user in session (userLoggeId) and allows the action otherwise it will deny the request to the user. 
      operationId: getUserById
      parameters:
      - name: userLoggedId
        in: path
        description: Identifies the logged on user and whether he/she has permissions to perform the get user by Id. action.
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: userId
        in: path
        description: Specifies the user id to query, each user is identified with a numeric id. 
        required: true
        schema:
          type: integer
          format: int32 
          example: 123
      responses:
        200:
          description: OK - data.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/userById'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "La información del usuario no pudo ser consultada."}
              - {"error": "Error en validación"}    
  
  /users/delete/{userLoggedId}/{userId}:  
    delete:
      tags:
      - users
      security:
      - bearerAuth: []
      summary: Delete User
      description: Delete a user, only the administrator can perform this action and delete any user from the database, if the user has a client role he/she can only delete his/her own information, in this case the system verifies if the user to delete is the same user in session (userLoggeId) and allows the action otherwise it will deny the request to the user. 
      operationId: deleteUser
      parameters:
      - name: userLoggedId
        in: path
        description: Identifies the logged on user and whether he/she has permissions to perform the delete user action. 
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: userId
        in: path
        description: Specifies the userId to be able to perform the action and delete his own information.
        required: true
        schema:
          type: integer
          format: int32
          example: 7
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "Usuario eliminado con éxito."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "El usuario no pudo ser eliminado."}
              - {"error": "Error en validación"}    
              
#PRODUCTS PATHS
  /products:
    get:
      tags:
      - products
      summary: Get all products.
      description: Consult all the products in the menu with their specifications.
      operationId: getAllProducts
      responses:
        200:
          description: OK - data.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/productId'
                example:
                  - productId: 1
                    name: Hamburguesa
                    image: //HamburguesaImagen
                    cost: 20000
                  - productId: 2
                    name: Perrito
                    image: //PerritoImagen
                    cost: 6000
                  - productId: 3
                    name: Nachos
                    image: //NachosImagen
                    cost: 15000
        501:
          description: Error.
          content: 
            application/json:
              schema:
                $ref: '#/components/responses/501'
              example: 
              - {"error": "No se puede obtener la información."}
  
    post:
      tags:
      - products
      security:
      - bearerAuth: []
      summary: Create Product
      description: Only an administrator user can create a new product.
      operationId: createProduct
      requestBody:
        description: New product object to be added to database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productInfo'
            example:
              roleId: 1
              name: "Kangre Burguer"
              image:: //KBImagen
              cost: 16000
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "Producto creado con éxito."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "El producto no pudo ser creado."}
              - {"error": "Error en validación"}    
    
    put:
      tags:
      - products
      security:
      - bearerAuth: []
      summary: Update Product
      description: Update and existing product. Only the administrator can perform this action.
      operationId: updateProduct
      requestBody:
        description: New object (product) to be updated in database.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productInfo'
            example:
              roleId: 1
              productId: 2
              name: "Perrito"
              image: //PerritoImagen
              cost: 6000
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "Producto actualizado con éxito."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "El producto no pudo ser actualizado."}
              - {"error": "Error en validación"}            
    
  /products/getById/{productId}:
    get:
      tags:
      - products
      summary: Get Products by Product Id
      description: Consult the products in the menu through the productId to review all the product information.
      operationId: getById
      parameters:
      - name: productId
        in: path
        description: Specifies the product id to query, each product is identified with a numeric id. 
        required: true
        schema:
          type: integer
          format: int32 
          example: 12
      responses:
        200:
          description: OK - data.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/productId'
                example:
                  - productId: 3
                    name: Nachos
                    image: //NachosImagen
                    cost: 15000
        501:
          description: Error.
          content: 
            application/json:
              schema:
                $ref: '#/components/responses/501'
              example: 
              - {"error": "No se puede obtener la información."}
    
  /products/{roleId}/{productId}:
    delete:
      tags:
      - products
      security:
      - bearerAuth: []
      summary: Delete Product
      description: Delete a product, only the administrator can perform this action and delete any product from the database.
      operationId: deleteProduct
      parameters:
      - name: roleId
        in: path
        description: Specifies the role of the user to be able to perform the action and access the information as an administrator.
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: productId
        in: path
        description: Specifies the product id to delete, each product is identified with a numeric id.
        required: true
        schema:
          type: integer
          format: int32
          example: 7
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "Producto eliminado con éxito."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "El producto no pudo ser eliminado."}
              - {"error": "Error en validación"} 
    
#ORDERS PATHS
  /orders/createOrder:
    post:
      tags:
      - orders
      security:
      - bearerAuth: []
      summary: Create Order
      description: Only a logged user can create a new order
      operationId: createOrder
      requestBody:
        description: List of products to be added and create an order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrder'
            example:
              userId: 3
              payTypeId: 2
              description: "1xCafé, 1xPanini"
              total: 16000
              listProduct:
                - productId: 11
                  quantity: 1
                - productId: 8
                  quantity: 1
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Orden creada con éxito."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        501:
          description: Error
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
              example: 
                {"error": "No se pudo crear la orden."}
  
  /orders/getAllOrders/{roleId}:
    get:
      tags:
      - orders
      security:
      - bearerAuth: []
      summary: Get All Orders
      description: Only an administrator user can access to all orders.
      operationId: getAllOrders
      parameters:
      - name: roleId
        in: path
        description: Specifies the role of the user to be able to perform the action and access the information as an administrator.
        required: true
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: OK - data.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/orders'
                example:
                - status: Nuevo
                  orderTime: "2021-08-19T15:13:49.000Z"
                  orderId: 10
                  orderDescription: "1xSoda, 1xPanini"
                  payDescription: Efectivo
                  total: 16000
                  fullUserName: "John Smith"
                  address: "Altos del Parque No. 12"
                - status: Confirmado
                  orderTime: "2021-08-19T15:01:09.000Z"
                  orderId: 6
                  orderDescription: "1xCafé, 1xPicada"
                  payDescription: Efectivo
                  total: 39000
                  fullUserName: "Lara Croft"
                  address: "Circunvalar 7 # 8 - 90"
                - status: En preparación
                  orderTime: "2021-08-16T19:31:48.000Z"
                  orderId: 5
                  orderDescription: "2xPerrito, 1xSoda"
                  payDescription: Tarjeta
                  total: 19000
                  fullUserName: "Jane Doe"
                  address: "Calle 2 # 3 -45"
                - status: En camino
                  orderTime: "2021-08-16T19:24:08.000Z"
                  orderId: 4
                  orderDescription: "1xPizza, 2xNachos, 1xSoda, 1xJugoNatural"
                  payDescription: Efectivo
                  total: 47500
                  fullUserName: "John Smith"
                  address: "Altos del Parque No. 12"
                - status: Entregado
                  orderTime: "2021-08-05T21:41:52.000Z"
                  orderId: 2
                  orderDescription: "1xHamburgesa, 1xJugo Natural"
                  payDescription: Tarjeta
                  total: 24500
                  fullUserName: "Paola Andrea Cadena Joya"
                  address: "Carrera 1 # 2 - 3"
                - status: Cancelado
                  orderTime: "2021-08-19T16:56:14.000Z"
                  orderId: 11
                  orderDescription: "1xCafé, 1xPanini"
                  payDescription: Tarjeta
                  total: 17000
                  fullUserName: "Lara Croft"
                  address: "Circunvalar 7 # 8 - 90"
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "No se puede obtener la información."}
              - {"error": "Error en validación"}    
  
  /orders/{userLoggedId}/{userId}:  
    get:
      tags:
      - orders
      security:
      - bearerAuth: []
      summary: Get Orders by User Id
      description: Get all the orders information associate with a userId. Administrator can perform this action and get the information of the orders of a user.  The user with a client rol onle get his/her own orders information by Id, the system verifies if the query user is the same user in session.
      operationId: getOrdersByUserId
      parameters:
      - name: userLoggedId
        in: path
        description: Identifies the logged on user and whether he/she has permissions to perform the get user by Id.
        required: true
        schema:
          type: integer
          format: int32
          example: 2
      - name: userId
        in: path
        description: Specifies the user id to query, each user is identified with a numeric id. 
        required: true
        schema:
          type: integer
          format: int32 
          example: 12
      responses:
        200:
          description: OK - data.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/orders'
                example:
                - status: Nuevo
                  orderTime: "2021-08-19T15:13:49.000Z"
                  orderId: 10
                  orderDescription: "1xSoda, 1xPanini"
                  payDescription: Efectivo
                  total: 16000
                  fullUserName: "John Smith"
                  address: "Altos del Parque No. 12"
                - status: En preparación
                  orderTime: "2021-08-19T15:09:55.000Z"
                  orderId: 9
                  orderDescription: "1xSoda, 1xPanini"
                  payDescription: Efectivo
                  total: 16000
                  fullUserName: "John Smith"
                  address: "Altos del Parque No. 12"
                - status: En camino
                  orderTime: "2021-08-16T19:24:08.000Z"
                  orderId: 4
                  orderDescription: "1xPizza, 2xNachos, 1xSoda, 1xJugoNatural"
                  payDescription: Efectivo
                  total: 47500
                  fullUserName: "John Smith"
                  address: "Altos del Parque No. 12"
        204:
          description: No Content
          content: 
            application/json:
              schema:
                type: string
                example: {"message": "El usuario no posee órdenes"}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "No se puede obtener la información."}
              - {"error": "Error en validación"}    
  
  /orders/updateOrderStatus:
    put:
      tags: 
      - orders
      security:
      - bearerAuth: []
      summary: Update Order Status
      description: Updates the order status in order to aware the user the process order
      operationId: updateOrderStatus
      requestBody:
        description: New status to update the order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderStatus'
            example:
              roleId: 1
              ordeId: 9
              orderStatusId: 3
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
                example: { "message": "El estado de la orden ha sido actualizado."}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/token403'
                - $ref: '#/components/responses/403'
              example:
              - Forbidden
              - {"message": "El usuario no tiene permisos para esta acción."}
        501:
          description: Error.
          content: 
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/responses/501'
                - $ref: '#/components/responses/validator501'
              example: 
              - {"error": "El estado de la orden no pudo ser actualizado."}
              - {"error": "Error en validación"} 
                 
components:
  schemas:
#USERS SCHEMAS
    users:
      required:
      - username
      - roleId
      - password
      - firstName
      - lastName
      - email
      - address
      - phone
      type: object
      properties:
        username:
          type: string
          example: jsmith
        roleId:
          type: integer
          example: 2
        password:
          type: string
          format: password
          example: $2b$10$PjzUwmpON4iHG4YbMp2SUOmQSsgtADM./pbb92fyaqxXbXn3Yxzhm
        firstName: 
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        email:
          type: string
          format: email
          example: smithjohn@mail.com
        address:
          type: string
          example: Altos del Parque No. 12
        phone:
          type: string
          example: 3019876532
          
    login:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
          example: jsmith
        password:
          type: string
          format: password
          example: def123
          
    userById:
      allOf:
        - type: object
          properties:
            userId:
              type: integer
              example: 5
        - $ref: '#/components/schemas/users'
          
    allUsers:
      type: array
      items:
        type: object
        properties:
          userId:
            type: integer 
          username: 
            type: string
          roleId:
            type: integer
          password:
            type: string
            format: password
          firstName: 
            type: string
          lastName:
            type: string
          email:
            type: string
            format: email
          address:
            type: string
          phone:
            type: string
          enable:
            type: string
            
    updateUser:
      required:
      - userLoggedId
      - userId
      - username
      - password
      - firstName
      - lastName
      - email
      - address
      - phone
      type: object
      properties:
        userLoggedId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 5
        username:
          type: string
          example: jsmith
        password:
          type: string
          format: password
          example: def123
        firstName: 
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        email:
          type: string
          format: email
          example: smithjohn@mail.com
        address:
          type: string
          example: Altos del Parque No. 12
        phone:
          type: string
          example: 3019876532

#PRODUCTS SCHEMAS
    product:
      required:
        - name
        - image
        - cost
      type: object
      properties:
          name:
            type: string
          image:
            type: string
            format: byte
            description: Base64-encoded contents of the product image
          cost:
            type: integer
            
    productId:
      allOf:
        - type: object
          properties:
            productId:
              type: integer
        - $ref: '#/components/schemas/product'

    productInfo:
      allOf:
        - type: object
          properties:
            roleId:
              type: integer
        - $ref: '#/components/schemas/productId'
        
#ORDERS SCHEMAS:
    orders:
      type: array
      items:
        type: object
        properties:
          status:
            type: string 
          orderTime: 
            type: string
            format: data_time
          orderId:
            type: integer
          orderDescription:
            type: string
          payDescription:
            type: string
          total:
            type: integer
          fullUserName:
            type: string
          address:
            type: string
    
    listProduct:
      type: array
      items:
        type: object
        properties: 
          productId:
            type: integer
          quantity:
            type: integer        
            
    createOrder:
      allOf:
        - type: object
          properties:
            userId:
              type: integer
            payTypeId:
              type: integer
            description:
              type: string
            total:
              type: integer
        - $ref: '#/components/schemas/listProduct'

    orderStatus:
      required:
      - roleId
      - orderId
      - orderStatusId
      type: object
      properties:
        roleId:
          type: integer
        orderId:
          type: integer
        orderStatusId:
          type: integer
        
#RESPONSES
  responses:
    token403:
      description: Forbidden
      content: {}
    
    403:
      description: No Auth
      content:
        application/json:
          schema:
            type: string
      
    validator501:
      description: Error
      content:
        application/json:
          schema:
            type: string
            
    501:
      description: Error
      content:
        application/json:
          schema:
            type: string
           

# SECURITY SCHEMAS          
  securitySchemes:
      bearerAuth: 
        type: http
        scheme: bearer
        bearerFormat: JWT